const { jsPDF } = require("jspdf");
const fs = require("fs");
const path = require("path");
const db = require("../config/db");
require("jspdf-autotable");

// Fetch all contracts with vendor details
const getAllContracts = (req, res) => {
  db.query("CALL GetAllContractsWithVendorDetails();", (err, result) => {
    if (err) {
      return res.status(500).json({
        success: false,
        message: "Error fetching contracts from the database.",
      });
    }
    console.log(result[0]);
    // Send the contracts data
    res.status(200).json(result[0]);
  });
};

// Fetch a single contract's details by contractId
// Fetch a single contract's details by contractId
const getContractDetails = (req, res) => {
  const { contractId } = req.params; // Get contractId from the URL parameters

  // Validate contractId
  if (!contractId || isNaN(contractId)) {
    return res.status(400).json({
      success: false,
      message: "Invalid contract ID.",
    });
  }

  // SQL query to fetch contract details based on contractId
  const query = "SELECT * FROM Contract WHERE contract_id = ?";

  db.query(query, [contractId], (err, result) => {
    if (err) {
      console.error("Error fetching contract details:", err); // Log the error
      return res.status(500).json({
        success: false,
        message: "Error fetching contract details.",
      });
    }

    if (result.length === 0) {
      return res.status(404).json({
        success: false,
        message: "Contract not found.",
      });
    }

    // Send the contract details as the response
    res.status(200).json({
      success: true,
      contract: result[0], // Send the first contract from the result (should be only one)
    });
  });
};

const generateReport = (req, res) => {
  try {
    const doc = new jsPDF();
    db.query("CALL GetAllContractsWithVendorDetails();", (err, result) => {
      if (err) {
        return res.status(500).json({
          success: false,
          message: "Error fetching contract details for report generation.",
        });
      }

      const contracts = result[0];

      // Prepare table data for PDF
      const tableData = contracts.map((contract) => [
        contract.contract_name || "N/A",
        contract.contract_terms || "N/A",
        contract.start_date || "N/A",
        contract.end_date || "N/A",
        contract.contract_value || "N/A",
      ]);

      const columns = [
        "Contract Name",
        "Terms",
        "Start Date",
        "End Date",
        "Contract Value",
      ];

      doc.setFont("helvetica", "bold");
      doc.setFontSize(16);
      doc.setTextColor(0, 102, 204);
      doc.text("Contracts Report", 105, 40, { align: "center" });

      doc.autoTable(columns, tableData, {
        startY: 50,
        margin: { top: 10 },
        theme: "grid",
        headStyles: {
          fillColor: [0, 102, 204],
          textColor: [255, 255, 255],
          fontSize: 12,
          halign: "center",
          fontStyle: "bold",
        },
        bodyStyles: {
          fontSize: 10,
          halign: "center",
        },
        alternateRowStyles: {
          fillColor: [240, 240, 240],
        },
      });

      doc.setFont("helvetica", "italic");
      doc.setFontSize(10);
      doc.setTextColor(255, 87, 34);
      doc.text(
        "Generated by: Your Company",
        105,
        doc.internal.pageSize.height - 20,
        { align: "center" }
      );

      const pdfBuffer = doc.output("arraybuffer");

      res.setHeader("Content-Type", "application/pdf");
      res.setHeader(
        "Content-Disposition",
        "attachment; filename=contracts-report.pdf"
      );
      res.end(Buffer.from(pdfBuffer));
    });
  } catch (error) {
    console.error("Error generating report:", error);
    return res.status(500).json({
      success: false,
      message: "Error generating the report.",
    });
  }
};

module.exports = { getAllContracts, generateReport, getContractDetails };
